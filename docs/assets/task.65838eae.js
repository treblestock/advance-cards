import{h as o,c as i,y as u,i as h,z as l}from"./index.03d3e705.js";import{u as d}from"./sets.adcfbd80.js";import{u as r}from"./setsRevisions.b252208a.js";import{u as c}from"./stats.b52f467e.js";function*m(t){for(;t.size;)for(const s of t)yield s}let a;const C=o("task",{state:()=>({setName:null,toRevise:new Set,cardsCount:null,timeStart:null,timeFinish:null,currentCard:{question:null,answer:null},stats:new Set}),getters:{},actions:{reset(){this.timeFinish=null,this.timeStart=null,this.cardsCount=null,this.currentCard.answer=null,this.currentCard.question=null,this.toRevise.clear(),this.stats.clear()},createTask(){const t=i(()=>d().sets[this.setName]),s=i(()=>r().sets[this.setName]);u([t,s],()=>{if(!(!t.value||!s.value)){for(const e in t.value){const n=t.value[e];h(s.value[e])&&this.toRevise.add({question:e,answer:n})}this.toRevise=l(this.toRevise),a=m(this.toRevise),this.cardsCount=this.toRevise.size,this.timeStart=Date.now(),this.currentCard=a.next().value}},{immediate:!0})},_updateTaskStats(t){this.stats.add(t)},_updateTask(t){t.isCorrect&&this.toRevise.delete(this.currentCard),this.currentCard=a.next().value,this.currentCard||this.onFinish()},onAnswer(t){this._updateTaskStats(t),c().onAnswer(t),r().updateRevisionCardData(t),this._updateTask(t)},onFinish(){this.timeFinish=Date.now(),this.$router.push({name:"taskReport"})}}});export{C as u};
